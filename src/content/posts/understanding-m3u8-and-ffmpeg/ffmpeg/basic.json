{
  "blocks": [
    {
      "id": "ffmpeg-intro-heading",
      "type": "heading",
      "props": {
        "content": "FFmpegによるHLSストリーミングの基本操作",
        "level": 2,
        "align": "left"
      }
    },
    {
      "id": "ffmpeg-intro",
      "type": "text",
      "props": {
        "content": "FFmpegは、動画・音声ファイルの変換や処理において、最も広く使用されているオープンソースのマルチメディアフレームワークです。HLSストリーミング用のm3u8ファイルとセグメントファイルの作成にも、FFmpegの強力な機能を活用することができます。ここでは、FFmpegを使用したHLS関連の基本的な操作方法について、具体的な例を交えながら解説していきます。",
        "align": "left"
      }
    },
    {
      "id": "basic-conversion-heading",
      "type": "heading",
      "props": {
        "content": "基本的な動画のHLS形式への変換",
        "level": 3,
        "align": "left"
      }
    },
    {
      "id": "basic-conversion",
      "type": "text",
      "props": {
        "content": "最も基本的な操作として、単一の動画ファイルをHLS形式に変換する方法を見ていきましょう。この処理では、入力動画から一連のセグメントファイルとm3u8プレイリストを生成します。FFmpegは、この変換プロセスを効率的に実行し、様々なカスタマイズオプションも提供しています。",
        "align": "left"
      }
    },
    {
      "id": "basic-command",
      "type": "code",
      "props": {
        "language": "bash",
        "code": "ffmpeg -i input.mp4 \\\n  -profile:v baseline -level 3.0 \\\n  -start_number 0 \\\n  -hls_time 10 \\\n  -hls_list_size 0 \\\n  -f hls \\\n  output.m3u8",
        "fileName": "basic-hls-conversion.sh"
      }
    },
    {
      "id": "command-explanation",
      "type": "text",
      "props": {
        "content": "このコマンドの各パラメータについて詳しく解説します。\n\n-profile:v baselineと-level 3.0は、H.264エンコーディングのプロファイルとレベルを指定します。baselineプロファイルは、幅広いデバイスとの互換性を確保するために選択されています。モバイルデバイスを含む多くのプレーヤーがこの設定をサポートしています。\n\n-start_number 0は、生成されるセグメントファイルの番号付けを0から開始することを指定します。これは、プレイリストの管理とセグメントの順序付けに重要です。\n\n-hls_time 10は、各セグメントの長さを10秒に設定します。この値は、ストリーミングの品質とサーバーの負荷のバランスを考慮して選択されます。短すぎるセグメントはサーバーへのリクエスト数を増やし、長すぎるセグメントは初期バッファリング時間を延長させる可能性があります。\n\n-hls_list_size 0は、m3u8プレイリストに含めるセグメントの数を無制限に設定します。これにより、すべてのセグメントがプレイリストに保持され、完全なVOD（ビデオオンデマンド）再生が可能になります。\n\n-f hlsは、出力フォーマットをHLSに指定します。この設定により、FFmpegは適切なセグメメント分割とプレイリスト生成を行います。",
        "align": "left"
      }
    },
    {
      "id": "encoding-options-heading",
      "type": "heading",
      "props": {
        "content": "エンコーディングオプションのカスタマイズ",
        "level": 3,
        "align": "left"
      }
    },
    {
      "id": "encoding-options",
      "type": "text",
      "props": {
        "content": "HLS変換時のエンコーディング設定をカスタマイズすることで、より細かな品質制御が可能です。以下に、一般的なカスタマイズオプションとその効果について説明します。",
        "align": "left"
      }
    },
    {
      "id": "advanced-command",
      "type": "code",
      "props": {
        "language": "bash",
        "code": "ffmpeg -i input.mp4 \\\n  -c:v libx264 -preset medium \\\n  -crf 23 \\\n  -c:a aac -b:a 128k \\\n  -hls_time 6 \\\n  -hls_segment_filename 'segment%03d.ts' \\\n  -hls_playlist_type vod \\\n  output.m3u8",
        "fileName": "advanced-hls-conversion.sh"
      }
    },
    {
      "id": "advanced-explanation",
      "type": "text",
      "props": {
        "content": "このコマンドでは、より詳細なエンコーディング設定を指定しています。-c:v libx264は、H.264ビデオコーデックを使用することを指定します。動画のエンコードには、x264ライブラリが使用されます。\n\n-preset mediumは、エンコードの速度と圧縮効率のバランスを設定します。利用可能なプリセットには、ultrafast、superfast、veryfast、faster、fast、medium、slow、slower、veryslow があり、遅いプリセットほど高い圧縮効率が得られますが、エンコード時間が長くなります。\n\n-crf 23は、固定品質でのエンコードを指定します。CRF（Constant Rate Factor）値は0（無損失）から51（最低品質）の範囲で設定可能で、通常は18-28の範囲が使用されます。値が小さいほど高品質になりますが、ファイルサイズも大きくなります。\n\n-c:a aacと-b:a 128kは、音声のエンコード設定です。AACコーデックを使用し、ビットレートを128kbpsに設定します。\n\n-hls_segment_filenameでは、セグメントファイルの命名パターンを指定しています。%03dは、3桁の連番（001, 002, ...）に置き換えられます。\n\n-hls_playlist_type vodは、このプレイリストがビデオオンデマンド用であることを指定します。この設定により、プレイリストは完全な状態で生成され、後から変更されることはありません。",
        "align": "left"
      }
    },
    {
      "id": "basic-output-structure",
      "type": "text",
      "props": {
        "content": "変換が完了すると、以下のようなファイル構造が生成されます：\n\n- output.m3u8: メインのプレイリストファイル\n- segment000.ts, segment001.ts, ...: 各セグメントファイル\n\nこれらのファイルは、Webサーバーにアップロードすることで、HLSストリーミングが可能になります。ただし、適切なMIMEタイプの設定が必要です：\n\n- .m3u8ファイル: application/vnd.apple.mpegurl\n- .tsファイル: video/mp2t\n\nこれらの基本的な操作を理解することで、より高度なHLSストリーミングの実装に進むことができます。次のセクションでは、マルチビットレートストリーミングの設定など、より発展的なトピックについて解説します。",
        "align": "left"
      }
    }
  ]
}