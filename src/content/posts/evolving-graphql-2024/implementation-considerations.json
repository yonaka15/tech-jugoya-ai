{
  "blocks": [
    {
      "id": "implementation-intro",
      "type": "text",
      "props": {
        "content": "GraphQLの実装において、特に考慮すべき重要な点がいくつかあります。ここでは、パフォーマンス最適化、セキュリティ、エラーハンドリングなど、実装時の主要な課題とその解決策について詳しく見ていきます。",
        "align": "left"
      }
    },
    {
      "id": "n-plus-one-heading",
      "type": "heading",
      "props": {
        "content": "N+1問題への対処",
        "level": 2,
        "align": "left"
      }
    },
    {
      "id": "n-plus-one-explanation",
      "type": "text",
      "props": {
        "content": "N+1問題は、GraphQLの実装で最も一般的なパフォーマンス課題の一つです。これは、ネストされたリレーションを取得する際に、親オブジェクトに対して1回のクエリと、各子オブジェクトに対してN回のクエリが実行される状況を指します。\n\nたとえば、ユーザーとその投稿を取得する場合、最初にユーザーリストを取得するクエリが1回、各ユーザーの投稿を取得するクエリがN回（ユーザー数分）実行されることになります。",
        "align": "left"
      }
    },
    {
      "id": "n-plus-one-diagram",
      "type": "mermaid",
      "props": {
        "content": "sequenceDiagram\n    participant Client\n    participant GraphQL\n    participant DB\n    Client->>GraphQL: Query users with posts\n    GraphQL->>DB: Select users\n    DB->>GraphQL: Return users\n    loop For each user\n        GraphQL->>DB: Select posts\n        DB->>GraphQL: Return posts\n    end\n    GraphQL->>Client: Complete response",
        "caption": "N+1問題の発生パターン",
        "theme": "default"
      }
    },
    {
      "id": "dataloader-heading",
      "type": "heading",
      "props": {
        "content": "DataLoaderによる解決",
        "level": 3,
        "align": "left"
      }
    },
    {
      "id": "dataloader-example",
      "type": "code",
      "props": {
        "language": "typescript",
        "fileName": "dataloader.ts",
        "code": "import DataLoader from 'dataloader';\n\nconst postLoader = new DataLoader(async (userIds: readonly string[]) => {\n  // 複数のユーザーIDに対する投稿を一括取得\n  const posts = await db.posts.findMany({\n    where: {\n      userId: { in: userIds }\n    }\n  });\n\n  // 各ユーザーIDに対応する投稿の配列を返す\n  return userIds.map(userId => \n    posts.filter(post => post.userId === userId)\n  );\n});\n\nconst resolvers = {\n  User: {\n    posts: async (parent) => {\n      // DataLoaderを使用して投稿を取得\n      return await postLoader.load(parent.id);\n    }\n  }\n};",
        "highlight": [3, 19]
      }
    },
    {
      "id": "batching-example",
      "type": "code",
      "props": {
        "language": "sql",
        "fileName": "optimized-query.sql",
        "code": "-- DataLoaderを使用した場合の最適化されたクエリ\nSELECT *\nFROM posts\nWHERE user_id IN (1, 2, 3, 4, 5);\n\n-- N+1問題が発生する場合のクエリ\n-- これが複数回実行される\nSELECT *\nFROM posts\nWHERE user_id = ?;",
        "highlight": [1, 2, 3, 4]
      }
    },
    {
      "id": "caching-heading",
      "type": "heading",
      "props": {
        "content": "キャッシュ戦略",
        "level": 2,
        "align": "left"
      }
    },
    {
      "id": "caching-explanation",
      "type": "text",
      "props": {
        "content": "効果的なキャッシュ戦略は、GraphQLアプリケーションのパフォーマンスを大きく向上させることができます。多層的なキャッシュアプローチを採用することで、様々なレベルでのパフォーマンス最適化が可能です。",
        "align": "left"
      }
    },
    {
      "id": "caching-diagram",
      "type": "mermaid",
      "props": {
        "content": "graph TD\n    A[クライアント] -->|1. アプリケーションキャッシュ| B[Apollo Client Cache]\n    B -->|2. HTTP キャッシュ| C[CDN]\n    C -->|3. API キャッシュ| D[GraphQL Server]\n    D -->|4. データソースキャッシュ| E[Redis/Memcached]\n    E -->|5. データベース| F[PostgreSQL/MySQL]",
        "caption": "多層キャッシュ戦略",
        "theme": "default"
      }
    },
    {
      "id": "security-heading",
      "type": "heading",
      "props": {
        "content": "セキュリティ考慮事項",
        "level": 2,
        "align": "left"
      }
    },
    {
      "id": "security-explanation",
      "type": "text",
      "props": {
        "content": "GraphQLのフレキシビリティは、セキュリティ面での新たな課題も生み出します。主な考慮点として：\n\n1. クエリの複雑性制限\n2. レート制限の実装\n3. 認可の適切な実装\n\nこれらの課題に対する適切な対策が必要です。",
        "align": "left"
      }
    },
    {
      "id": "query-complexity",
      "type": "code",
      "props": {
        "language": "typescript",
        "fileName": "query-complexity.ts",
        "code": "import { createComplexityRule } from 'graphql-query-complexity';\n\nconst complexityRule = createComplexityRule({\n  maximumComplexity: 1000,\n  variables: {},\n  onComplete: (complexity) => {\n    console.log('Query Complexity:', complexity);\n  },\n  createError: (max, actual) => {\n    return new Error(\n      `Query is too complex: ${actual}. Maximum allowed complexity: ${max}`\n    );\n  },\n  estimators: [\n    // フィールドの複雑さを定義\n    fieldConfigEstimator(),\n    // 再帰的なクエリの複雑さを計算\n    simpleEstimator({ defaultComplexity: 1 })\n  ]\n});\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n  validationRules: [complexityRule]\n});",
        "highlight": [3, 4, 15, 18]
      }
    },
    {
      "id": "auth-example",
      "type": "code",
      "props": {
        "language": "typescript",
        "fileName": "authorization.ts",
        "code": "const resolvers = {\n  Query: {\n    protectedData: async (_, __, context) => {\n      // コンテキストから認証情報を取得\n      if (!context.user) {\n        throw new AuthenticationError('認証が必要です');\n      }\n\n      // 認可チェック\n      if (!context.user.hasPermission('read:data')) {\n        throw new ForbiddenError('アクセス権限がありません');\n      }\n\n      return await fetchProtectedData();\n    }\n  },\n  Mutation: {\n    updateData: async (_, { input }, context) => {\n      // トランザクション内での認可チェック\n      await context.db.transaction(async (tx) => {\n        const data = await tx.data.findUnique({\n          where: { id: input.id }\n        });\n\n        if (!context.user.canEdit(data)) {\n          throw new ForbiddenError('編集権限がありません');\n        }\n\n        return await tx.data.update({\n          where: { id: input.id },\n          data: input.data\n        });\n      });\n    }\n  }\n};",
        "highlight": [5, 10, 25]
      }
    },
    {
      "id": "error-handling-heading",
      "type": "heading",
      "props": {
        "content": "エラーハンドリング",
        "level": 2,
        "align": "left"
      }
    },
    {
      "id": "error-handling-explanation",
      "type": "text",
      "props": {
        "content": "GraphQLでのエラーハンドリングは、クライアントにとって有用な情報を提供しながら、セキュリティも考慮する必要があります。適切なエラーレスポンスの設計と、エラー情報の適切な粒度の選択が重要です。",
        "align": "left"
      }
    },
    {
      "id": "error-handling-example",
      "type": "code",
      "props": {
        "language": "typescript",
        "fileName": "error-handling.ts",
        "code": "class ValidationError extends ApolloError {\n  constructor(message: string) {\n    super(message, 'VALIDATION_ERROR');\n  }\n}\n\nclass ResourceNotFoundError extends ApolloError {\n  constructor(resource: string) {\n    super(`${resource} not found`, 'NOT_FOUND');\n  }\n}\n\nconst resolvers = {\n  Mutation: {\n    createUser: async (_, { input }) => {\n      try {\n        await validateUserInput(input);\n        return await createUser(input);\n      } catch (error) {\n        if (error instanceof ValidationError) {\n          // バリデーションエラーはそのまま返す\n          throw error;\n        }\n        // その他のエラーはログに記録し、一般的なエラーメッセージを返す\n        console.error('User creation error:', error);\n        throw new ApolloError('Internal server error');\n      }\n    }\n  }\n};",
        "highlight": [1, 7, 20, 26]
      }
    },
    {
      "id": "monitoring-heading",
      "type": "heading",
      "props": {
        "content": "モニタリングと可観測性",
        "level": 2,
        "align": "left"
      }
    },
    {
      "id": "monitoring-explanation",
      "type": "text",
      "props": {
        "content": "本番環境でのGraphQLの運用には、適切なモニタリングと可観測性の確保が不可欠です。以下の要素を考慮する必要があります：\n\n1. クエリのパフォーマンス監視\n2. エラーレートの追跡\n3. リゾルバーの実行時間計測\n4. リソース使用率の監視\n\nこれらの情報を収集・分析することで、システムの健全性を維持し、問題の早期発見が可能になります。",
        "align": "left"
      }
    },
    {
      "id": "instrumentation-example",
      "type": "code",
      "props": {
        "language": "typescript",
        "fileName": "instrumentation.ts",
        "code": "import { ApolloServer } from 'apollo-server';\nimport { ApolloServerPluginUsageReporting } from 'apollo-server-core';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginUsageReporting({\n      sendTraces: true,\n      fieldLevelInstrumentation: 1.0,\n      rewriteError: (err) => {\n        // エラー情報をサニタイズ\n        if (err.message.match(/database/i)) {\n          return new Error('Internal database error');\n        }\n        return err;\n      }\n    })\n  ],\n  formatError: (error) => {\n    console.error('GraphQL Error:', error);\n    return error;\n  }\n});",
        "highlight": [8, 10, 11, 20]
      }
    }
  ]
}