{
  "meta": {
    "title": "TypeScriptのベストプラクティス2024",
    "description": "TypeScriptを効果的に活用するためのベストプラクティスを紹介します。型の活用からプロジェクト構成まで、実践的なTipsをお届けします。",
    "publishedAt": "2024-01-15T00:00:00.000Z",
    "updatedAt": "2024-01-16T00:00:00.000Z",
    "tags": ["TypeScript", "JavaScript", "Programming", "Best Practice"]
  },
  "blocks": [
    {
      "id": "intro",
      "type": "text",
      "props": {
        "content": "TypeScriptは、静的型付けによってJavaScriptの開発体験を大きく向上させます。本記事では、実務で活用できる具体的なベストプラクティスを紹介します。",
        "align": "left"
      }
    },
    {
      "id": "callout-version",
      "type": "callout",
      "props": {
        "type": "info",
        "title": "対象バージョン",
        "content": "この記事はTypeScript 5.0以降を対象としています。"
      }
    },
    {
      "id": "code-example",
      "type": "code",
      "props": {
        "language": "typescript",
        "fileName": "types.ts",
        "code": "type User = {\n  id: string;\n  name: string;\n  email?: string;\n};\n\nfunction processUser(user: User) {\n  console.log(user.name);\n}",
        "highlight": [1, 7]
      }
    }
  ]
}